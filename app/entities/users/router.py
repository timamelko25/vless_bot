from aiogram import Router, F
from aiogram.enums import ContentType
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.filters import CommandStart, CommandObject, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from loguru import logger

from app.config import bot, settings
from app.utils.utils import del_msg

from datetime import datetime

from .schemas import NewUserScheme
from .service import UserService
from app.entities.servers.service import ServerService
from app.entities.keys.service import KeyService

from .kb import main_inline_kb, profile_inline_kb, servers_inline_kb, keys_inline_kb, kb_confirm_upd, home_inline_kb, get_key_inline_kb

router = Router()


async def HOME_TEXT() -> str:
    return (
        f"<b>üåê VPN bot –Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ VLESS</b>\n\n"
        f"‚ö° <i>–ë—ã—Å—Ç—Ä—ã–π</i>, <i>–Ω–∞–¥—ë–∂–Ω—ã–π</i>\n"
        f"üéÅ <b>3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ</b>, –¥–æ 3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ 1 –∫–ª—é—á\n"
        f"üí∏ <b>70 —Ä—É–±–ª–µ–π</b> –∑–∞ 1 –∫–ª—é—á\n"
        f"üíé –ï—Å—Ç—å <b>—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n"
        f"<b>üöÄ –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å:</b>\n"
        f"1Ô∏è‚É£ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
        f"2Ô∏è‚É£ –õ–µ–≥–∫–æ—Å—Ç—å –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ\n"
        f"3Ô∏è‚É£ –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö\n"
        f"<i>üî• –ü–æ–¥–∫–ª—é—á–∞–π—Å—è –∏ –ø–æ–ª—É—á–∞–π –º–∞–∫—Å–∏–º—É–º –æ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!</i>\n"
    )


async def PROFILE_TEXT(balance: float, date_expire: datetime | None, refer_id: str) -> str:
    return (
        f" <b>üíº –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
        f" <b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> <i>{balance}</i>\n"
        f" <b>üìÖ –ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è:</b> <i>{date_expire}</i>\n"
        f" <b>üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f" <code>https://t.me/vless_tgbot?start={refer_id} </code>\n"
        f" ‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã –∏ –ø–æ–¥–∞—Ä–∫–∏!"
    )


class AddBalance(StatesGroup):
    balance = State()
    confirm = State()


@router.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject, state: FSMContext):
    await state.clear()
    user_id = str(message.from_user.id)

    user_info = NewUserScheme(
        telegram_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        refer_id=command.args
    )

    user = await UserService.find_one_or_none(telegram_id=user_info.telegram_id)

    if user is None:
        await UserService.add(
            **user_info.model_dump()
        )

        if user_info.refer_id:
            await UserService.update_count_refer(telegram_id=user_info.refer_id)
            logger.info(
                f"New user reg with ref system {user_info.model_dump()}")
        else:
            logger.info(f"New user reg {user_info.model_dump()}")

    await message.answer(
        text=await HOME_TEXT(),
        reply_markup=main_inline_kb(message.from_user.id)
    )


@router.message(Command('profile'))
async def profile_command(message: Message, state: FSMContext):
    await state.clear()

    user = await UserService.find_one_or_none(telegram_id=str(message.from_user.id))

    if user is not None:
        await message.answer(
            text=await PROFILE_TEXT(user.balance, None, user.refer_id),
            reply_markup=profile_inline_kb()
        )


@router.callback_query(F.data == 'home')
async def page_home(call: CallbackQuery):

    await call.message.edit_text(
        text=await HOME_TEXT(),
        reply_markup=main_inline_kb(call.from_user.id)
    )


@router.callback_query(F.data == 'get_profile')
async def get_user_profile(call: CallbackQuery):
    # user service find user from_user.id
    user = await UserService.find_one_or_none(telegram_id=str(call.from_user.id))

    if user is not None:
        await call.message.edit_text(
            text=await PROFILE_TEXT(user.balance, None, user.refer_id),
            reply_markup=profile_inline_kb()
        )


@router.callback_query(F.data == 'get_help')
async def get_help_for_key(call: CallbackQuery):

    await call.message.edit_text(
        text=(
            f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–µ–π"
        ),
        reply_markup=keys_inline_kb()
    )


@router.callback_query(F.data == 'start_getting_key')
async def get_servers(call: CallbackQuery):
    servers_list = await ServerService.get_servers_list()
    if servers_list:
        await call.message.edit_text(
            f"<b>üåç –í—ã–±–µ—Ä–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä</b>",
            reply_markup=servers_inline_kb(servers_list)
        )
    else:
        await call.message.edit_text(
            f"<b>üåç –í—ã–±–µ—Ä–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä</b>",
            reply_markup=servers_inline_kb(['Netherlands'])
        )


@router.callback_query(F.data == 'get_key')
async def get_key(call: CallbackQuery):
    user = await UserService.find_one_or_none(telegram_id=str(call.from_user.id))
    server = call.data.split(':')[0]

    if user.balance > 150:
        key = await UserService.create_key(telegram_id=str(call.from_user.id), server=server)

        logger.info(f"User {user.telegram_id} bought key {key.get('email')}")
        
        text = (
            "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b> –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∫–ª—é—á!\n\n"
            f"üåç <b>–°—Ç—Ä–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∏:</b> <code>{server}</code>\n"
            f"üìÖ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> <code>{key.get('expiryTime')}</code>\n\n"
            "üîë <b>–í–∞—à –∫–ª—é—á:</b>\n"
            f"<code>{key.get('value')}</code>\n\n"
            "üìú –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π."
        )

        await call.message.edit_text(
            text=text,
            reply_markup=keys_inline_kb(),
        )
    else:
        text = (
            f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å {user.balance}\n"
            f"–¶–µ–Ω–∞ –∫–ª—é—á–∞ <b>150 —Ä—É–±–ª–µ–π</b> –∑–∞ 1 —à—Ç.\n"
            f"üí∞ –°–ø–µ—Ä–≤–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á."
        )

        await call.message.edit_text(
            text=text,
            reply_markup=get_key_inline_kb(),
        )


@router.callback_query(F.data == 'top_up')
async def update_user_balance(call: CallbackQuery, state: FSMContext):

    msg = await call.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"
    )

    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(AddBalance.balance)


@router.message(F.text, AddBalance.balance)
async def get_balance(message: Message, state: FSMContext):
    try:
        balance = float(message.text.replace(',', '.').strip())
        if balance < 10:
            await message.answer("–û—à–∏–±–∫–∞. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 10")
            return
        elif balance > 10000:
            await message.answer("–û—à–∏–±–∫–∞. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 10000!")
            return
        await state.update_data(balance=balance)


        data = await state.get_data()

        text = (
            f"–ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞:\n"
            f"{data['balance']}"
        )
        msg = await message.answer(text=text, reply_markup=kb_confirm_upd())
        await del_msg(message, state)

        await state.update_data(last_msg_id=msg.message_id)
        await state.set_state(AddBalance.confirm)
    except ValueError:
        await message.answer(text="–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å!")
        return


@router.callback_query(F.data == 'confirm_add_balance')
async def confirm_add_balance(call: CallbackQuery, state: FSMContext):

    data = await state.get_data()
    # await bot.delete_message(chat_id=call.from_user.id, message_id=data['last_msg_id'])
    # del data['last_msg_id']

    user_info = await UserService.find_one_or_none(telegram_id=str(call.from_user.id))
    price = data['balance']
    # –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –æ–ø–ª–∞—Ç—É
    # await bot.send_invoice(
    #     chat_id=call.from_user.id,
    #     title=f'–û–ø–ª–∞—Ç–∞ üëâ {price}‚ÇΩ',
    #     description=f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ {price}‚ÇΩ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É.',
    #     payload=f"{user_info.id}_{data['balance']}",
    #     provider_token=settings.PROVIDER_TOKEN,
    #     currency='rub',
    #     prices=[LabeledPrice(
    #         label=f'–û–ø–ª–∞—Ç–∞ {price}',
    #         amount=int(price) * 100
    #     )],
    #     reply_markup=home_inline_kb()
    # )

    # await call.message.delete
    invoice = True
    if invoice:
        await UserService.update_balance(
            telegram_id=str(call.from_user.id),
            balance=data['balance']
        )

        await call.message.edit_text(text="–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!", reply_markup=home_inline_kb())


# @router.pre_checkout_query(lambda query: True)
# async def pre_checkout_query(pre_checkout_q: PreCheckoutQuery):
#     await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

@router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: Message):
    payment_info = message.successful_payment
    user_id, balance = payment_info.invoice_payload.split('_')
    payment_data = {
        'user_id': str(user_id),
        'payment_id': payment_info.telegram_payment_charge_id,
        'price': payment_info.total_amount / 100,
        'balance': int(balance)
    }

    await UserService.update_balance(
        telegram_id=str(user_id),
        balance=balance
    )

    for admin in settings.ADMINS_LIST:
        try:
            username = message.from_user.username
            user_info = f"@{username} ({message.from_user.id})" if username else f"c ID {message.from_user.id}"

            await bot.send_message(text=(
                f"üí≤ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {balance}"
            ))
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {e}")

    await message.edit_text(text="–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!", reply_markup=home_inline_kb())


@router.callback_query(F.data == 'promocode')
async def get_promocode(call: CallbackQuery):
    pass


@router.callback_query(F.data == 'get_all_keys')
async def get_all_user_keys(call: CallbackQuery):
    pass
